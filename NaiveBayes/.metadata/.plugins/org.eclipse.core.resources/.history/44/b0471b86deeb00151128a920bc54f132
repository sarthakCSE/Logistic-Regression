import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Log {
    
    HashMap ham = new HashMap();
    HashMap spam = new HashMap();
    HashMap hamTest = new HashMap();
    HashMap spamTest = new HashMap();
    HashMap pH = new HashMap();
    HashMap pS = new HashMap();
    Hashmap total = new HashMap();
    Set<String> HamWords = new HashSet<>();
    Set<String> SpamWords = new HashSet<>();
    Set<String> HamWordsTest = new HashSet<>();
    Set<String> SpamWordsTest = new HashSet<>();
    Set<String> words = new HashSet<>();
    Set<String> stopwords = new HashSet<>();
	List<String> mainString = new ArrayList<>();	
    String filesource;
    double probH = 0.73;
    double probS = 1 - probH;
    double probHDefault = 1, probSDefault = 1;
    int countHam =0, countSpam = 0;
    boolean isStopWord = true, insideLR = false;
    
    void getAllData(String folderPath) throws IOException{
        filesource = folderPath;
        File f = new File(folderPath);
        FilenameFilter wordFilter;
        
              
        wordFilter = new FilenameFilter() {
        	@Override
            public boolean accept(File dir, String name)
        	{
                return name.toLowerCase().endsWith(".txt");
            }
			
        };

        File[] files = f.listFiles(wordFilter);
        for (File file : files) 
		{
            getWords(file.getPath());
        }

    }
    


    private void showMaps() {
        int v = (int) ham.get("subject");
        ham.put("subject", v+340);
        int v1 = (int) spam.get("subject");
        spam.put("subject", v1+123);
    }
   
  	
    void prediction() throws IOException{
        mainString.clear();
        getAllData("Database\\test\\ham");
        getAllData("Database\\test\\spam");        
        double AccuracyH = ((double)(countHam)/348)*100;
        double AccuracyS = ((double)(countSpam)/130)*100;
        double TotalAccuracy = ((double)(countHam+countSpam)/478)*100;
        System.out.println("Ham accuracy = "+AccuracyH+"\nSpam accuracy = "+AccuracyS+"\nOverall Accuracy = "+TotalAccuracy);
        
    }
    
    void initLRL2() throws IOException{
        total.replaceAll((k,v) -> 0);
        insideLR = true;
        readAllTextFiles("C:\\Users\\Ashish\\Documents\\ML2\\train\\ham");//create voacbulary based on Ham and store in vocabHamTest
        readAllTextFiles("C:\\Users\\Ashish\\Documents\\ML2\\train\\spam");//create voacbulary based on Spam and store in vocabSpamTest
        wtMap.putAll(total);
        wtMap.replaceAll((k,v) -> 1);       //initialize all weights to 1
        for(int i=1;i<=463;i++)     //initialize all probability values to 0.5
            prMap.add(i, 0.5);
        for(int iteration=1;iteration<=100;iteration++){
            calculateProbMatrix();
            for(int i=1;i<=wtMap.size();i++)
                dw.set(i, 0);   //initialize all dw to 0
            calculateDW();
            calculateWeights();
        }
    
}
    
	 public static void main(String[] args) throws IOException  
	{        
		String HamLoc = args[0];
		String SpamLoc = args[1];
        Log NBStop = new Log();
        NBStop.getAllData(HamLoc);
        NBStop.getAllData(SpamLoc);
        
        NBStop.showMaps();
        NBStop.prediction();

    }
    
}
